<!--
  #%L
  marid-proto
  %%
  Copyright (C) 2012 - 2017 MARID software development group
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  #L%
  -->
<!--
  ~
  -->

<beans xmlns="http://www.springframework.org/schema/beans">

    <bean name="protoRoot" class="org.marid.proto.StdProtoRoot">
        <description>Protocol infrastructure root</description>

        <constructor-arg name="id" value="root"/>
        <constructor-arg name="name" value="root"/>
    </bean>

    <bean name="protoBus" class="org.marid.proto.StdProtoBus">
        <description>Protocol Bus</description>

        <constructor-arg name="root" type="org.marid.proto.StdProtoRoot" value="#{null}"/>
        <constructor-arg name="id" value="bus"/>
        <constructor-arg name="name" value="bus"/>
        <constructor-arg name="p">
            <bean name="props" class="org.marid.proto.StdProtoBusProps"/>
        </constructor-arg>
    </bean>

    <bean name="floatCodec" class="org.marid.proto.codec.FloatCodec">
        <description>Float value codec</description>
    </bean>

    <bean name="intCodec" class="org.marid.proto.codec.IntCodec">
        <description>Integer value codec</description>
    </bean>

    <bean name="doubleCodec" class="org.marid.proto.codec.DoubleCodec">
        <description>Double value coidec</description>

        <constructor-arg name="size" value="4"/>
    </bean>

    <bean name="doubleConsumer" class="org.marid.proto.codec.Consumers" factory-method="doubleConsumer">
        <description>Double consumer</description>

        <constructor-arg name="consumer" value="#{null}"/>
        <constructor-arg name="doubleCodec" ref="doubleCodec"/>
    </bean>

    <bean name="floatConsumer" class="org.marid.proto.codec.Consumers" factory-method="floatConsumer">
        <description>Float consumer</description>

        <constructor-arg name="consumer" value="#{null}"/>
        <constructor-arg name="floatCodec" ref="floatCodec"/>
    </bean>

    <bean name="intConsumer" class="org.marid.proto.codec.Consumers" factory-method="intConsumer">
        <description>Integer consumer</description>

        <constructor-arg name="consumer" value="#{null}"/>
        <constructor-arg name="integerCodec" ref="intCodec"/>
    </bean>

    <bean name="decoder" class="org.marid.proto.codec.Consumers" factory-method="decoder">
        <description>Decoder</description>

        <constructor-arg name="target" value="#{null}"/>
        <constructor-arg name="order" value="ABCD"/>
    </bean>

    <bean name="protoHealthMonitor" class="org.marid.proto.health.StdProtoBusHealthMonitor">
        <description>Protocol infrastructure health monitor</description>

        <constructor-arg name="bus" value="#{null}"/>
        <constructor-arg name="props">
            <bean name="props" class="org.marid.proto.health.StdProtoBusHealthMonitorProps"/>
        </constructor-arg>
    </bean>

    <bean class="org.marid.proto.modbus.ModbusTcpDriver" name="modbusTcpDriver">
        <description>MODBUS TCP driver</description>

        <constructor-arg name="bus" value="#{null}" type="org.marid.proto.ProtoBus"/>
        <constructor-arg name="id" value="drv1"/>
        <constructor-arg name="name" value="Driver 1"/>
        <constructor-arg name="props">
            <bean class="org.marid.proto.modbus.ModbusTcpDriverProps" name="driverProps"/>
        </constructor-arg>
    </bean>
</beans>
